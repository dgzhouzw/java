package org.example.java.foundational.operator.bit;

/**
 * 按位取反的使用
 *
 * @author zzw dgzzw1@163.com
 * @version 2022/12/27 17:19
 * @since JDK17
 */
public class BitNotOperator {

	public static void main(String[] args) {
		// 按位取反是一个单目运算符，只能操作变量或者表达式
		// 数据有符号的，按位取反会将符号位也一起取反

		/*
			245 默认是四个字节的内存，在内存中的二进制补码表示为 0000 0000 0000 0000 0000 0000 1111 0101
			0000 0000 0000 0000 0000 0000 1111 0101 ~
			1111 1111 1111 1111 1111 1111 0000 1010 按位取反补码的结果
			补码转换成原码
			1.补码转换成反码，补码减1结果是：1111 1111 1111 1111 1111 1111 0000 1001
			2.反码转成原码：              1000 0000 0000 0000 0000 0000 1111 0110
		 */
		// ~245 = -246
		System.out.println("有符号的正整数245按位取反的结果是" + (~245));

		/*
			负整数的按位取反的计算过程：
			-245 原码 1000 0000 0000 0000 0000 0000 1111 0101
			-245 反码 1111 1111 1111 1111 1111 1111 0000 1010
			-245 补码 1111 1111 1111 1111 1111 1111 0000 1011 按位取反补码的结果
					 0000 0000 0000 0000 0000 0000 1111 0100	=

		 */
		// ~-245 = 246
		System.out.println("有符号的负整数-245按位取反的结果是" + (~-245));


	}
}
